import logging
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    WebAppInfo,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´–ú–´ –ü–ò–î–û–†–´
–ú–´ –ü–ò–î–û–†–´


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7528920511:AAE24_C0VclbZNqd-omTEbqLK1maGmBmBQQ"
ADMINS = [1763797493, 6695638905]
CHANNEL_USERNAME = "@dravonstar"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
WAIT_SUPPORT_USERNAME = 1

# --- –ö–æ–¥—ã ---
codes = {
    "fix": {"max_uses": 0, "used_by": set()},
    "fix1": {"max_uses": 0, "used_by": set()},
    "fix2": {"max_uses": 0, "used_by": set()},
    "fix3": {"max_uses": 0, "used_by": set()},
    "fix4": {"max_uses": 0, "used_by": set()},
    "fix5": {"max_uses": 0, "used_by": set()},
    "fix6": {"max_uses": 0, "used_by": set()},
    "fix7": {"max_uses": 0, "used_by": set()},
    "DRMNAPP": {"max_uses": 1, "used_by": set()},
    "DRRESTAR": {"max_uses": 1, "used_by": set()},
    "DRHTML": {"max_uses": 1, "used_by": set()},
    "FROYOU": {"max_uses": 2, "used_by": set()},
    "GLSAN": {"max_uses": 2, "used_by": set()},
    "FRIDRAM": {"max_uses": 3, "used_by": set()},
    "MIRIG": {"max_uses": 5, "used_by": set()},
    "TEST": {"max_uses": 2, "used_by": set()},
}

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription(user_id, bot):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def require_subscription(handler_func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not await check_subscription(user_id, context.bot):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/dravonstar")],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscribe")]
            ])
            await update.effective_message.reply_text(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª @dravonstar.",
                reply_markup=keyboard
            )
            return ConversationHandler.END
        return await handler_func(update, context, *args, **kwargs)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@require_subscription
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–¥")],
        [KeyboardButton("–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    inline_buttons = [
        [
            InlineKeyboardButton(
                "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª ‚≠êÔ∏è", callback_data="support_channel"
            ),
            InlineKeyboardButton(
                "üöÄ –ú–∏–Ω–∏-–∞–ø–∫–∏",
                web_app=WebAppInfo(url="https://sanyok8901.github.io/dravona/"),
            ),
        ]
    ]
    inline_markup = InlineKeyboardMarkup(inline_buttons)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )
    await update.message.reply_text("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=inline_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@require_subscription
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:", reply_markup=ReplyKeyboardRemove()
        )
        return "WAIT_CODE"

    elif text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @yourname):",
            reply_markup=ReplyKeyboardRemove(),
        )
        return WAIT_SUPPORT_USERNAME
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ---
@require_subscription
async def receive_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_code = update.message.text.strip()
    user_id = update.message.from_user.id

    if user_code not in codes:
        await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return "WAIT_CODE"

    code_info = codes[user_code]

    if user_id in code_info["used_by"]:
        await update.message.reply_text("‚ùó–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–Ω–µ–µ.")
        return ConversationHandler.END

    if code_info["max_uses"] != 0 and len(code_info["used_by"]) >= code_info["max_uses"]:
        await update.message.reply_text(
            "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        return ConversationHandler.END

    context.user_data["code"] = user_code
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):"
    )
    return "WAIT_USERNAME"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ username –ø–æ—Å–ª–µ –∫–æ–¥–∞ ---
@require_subscription
async def receive_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    username_input = update.message.text.strip()

    user_code = context.user_data.get("code")
    if not user_code or user_code not in codes:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return ConversationHandler.END

    code_info = codes[user_code]

    if user_id in code_info["used_by"]:
        await update.message.reply_text("‚ùó–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–Ω–µ–µ.")
        return ConversationHandler.END

    if code_info["max_uses"] != 0 and len(code_info["used_by"]) >= code_info["max_uses"]:
        await update.message.reply_text(
            "‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
        return ConversationHandler.END

    code_info["used_by"].add(user_id)

    full_name = f"{user.first_name} {user.last_name or ''}".strip()
    real_username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"

    message = (
        f"üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥!\n\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üÜî Telegram ID: {user.id}\n"
        f"üîó Username –∏–∑ —á–∞—Ç–∞: {username_input}\n"
        f"üîó Username –∏–∑ Telegram: {real_username}\n"
        f"üîê –ö–æ–¥: {user_code}\n"
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: "
        f"{code_info['max_uses'] - len(code_info['used_by']) if code_info['max_uses'] != 0 else '‚àû'}"
    )

    for admin_id in ADMINS:
        await context.bot.send_message(chat_id=admin_id, text=message)

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–¥.")
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ username –¥–ª—è —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
@require_subscription
async def support_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    username_sent = update.message.text.strip()
    real_username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"

    msg = (
        f"üì© –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
        f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\n"
        f"üÜî Telegram ID: {user.id}\n"
        f"üîó Username –∏–∑ —á–∞—Ç–∞: {username_sent}\n"
        f"üîó Username –∏–∑ Telegram: {real_username}"
    )

    for admin_id in ADMINS:
        await context.bot.send_message(chat_id=admin_id, text=msg)

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    return ConversationHandler.END

# --- Callback –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ ---
async def inline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "check_subscribe":
        user_id = query.from_user.id
        if await check_subscription(user_id, context.bot):
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º start —á–µ—Ä–µ–∑ message, —á—Ç–æ–±—ã –º–µ–Ω—é –ø–æ—è–≤–∏–ª–æ—Å—å
            if query.message:
                fake_update = Update(
                    update.update_id,
                    message=query.message
                )
                await start(fake_update, context)
        else:
            await query.answer("‚ùó –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    else:
        await query.answer()
        if query.data == "support_channel":
            prices_options = [10, 30, 50, 100]
            buttons = [
                [
                    InlineKeyboardButton(
                        f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠êÔ∏è", callback_data=f"pay_{price}"
                    )
                ]
                for price in prices_options
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–≤ –∑–≤—ë–∑–¥–∞—Ö):", reply_markup=keyboard
            )
        elif query.data.startswith("pay_"):
            amount = int(query.data.split("_")[1])
            prices = [LabeledPrice(label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞", amount=amount)]
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠êÔ∏è", pay=True)]]
            )

            await query.message.reply_invoice(
                title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞",
                description=f"–û–ø–ª–∞—Ç–∞ {amount} –∑–≤—ë–∑–¥ Telegram Stars",
                payload=f"support_{amount}_{query.from_user.id}",
                provider_token="",  # –î–ª—è Telegram Stars ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                currency="XTR",
                prices=prices,
                reply_markup=keyboard,
            )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout ---
async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# --- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ---
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –∫–∞–Ω–∞–ª ‚≠êÔ∏è")

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            "WAIT_CODE": [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_code)],
            "WAIT_USERNAME": [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_username)],
            WAIT_SUPPORT_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, support_username)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(inline_callback))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    application.run_polling()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == "__main__":
    main()
