import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7528920511:AAE24_C0VclbZNqd-omTEbqLK1maGmBmBQQ"
ADMINS = [1763797493, 6695638905]
CHANNEL_USERNAME = "@dravonstar"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
WAIT_SUPPORT_USERNAME = 1

# --- –ö–æ–¥—ã ---
codes = {
    "fix": {"max_uses": 0, "used_by": set()},
    "fix1": {"max_uses": 0, "used_by": set()},
    "fix2": {"max_uses": 0, "used_by": set()},
    "fix3": {"max_uses": 0, "used_by": set()},
    "fix4": {"max_uses": 0, "used_by": set()},
    "fix5": {"max_uses": 0, "used_by": set()},
    "fix6": {"max_uses": 0, "used_by": set()},
    "fix7": {"max_uses": 0, "used_by": set()},
    "Bdek": {"max_uses": 2, "used_by": set()},
    "Sky": {"max_uses": 2, "used_by": set()},
    "Sold": {"max_uses": 3, "used_by": set()},
    "Ked": {"max_uses": 3, "used_by": set()},
    "Apw": {"max_uses": 5, "used_by": set()},
    "Okey": {"max_uses": 1, "used_by": set()},
    "Sisisi": {"max_uses": 1, "used_by": set()},
    "Barah": {"max_uses": 1, "used_by": set()},
    "Kizr": {"max_uses": 1, "used_by": set()},
    "Arka": {"max_uses": 1, "used_by": set()},
    "Dramo": {"max_uses": 1, "used_by": set()},
    "Ccel": {"max_uses": 1, "used_by": set()},

}

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription(user_id, bot):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
def require_subscription(handler_func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if not await check_subscription(user_id, context.bot):
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/dravonstar")],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscribe")]
            ])
            await update.effective_message.reply_text(
                "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª @dravonstar.",
                reply_markup=keyboard
            )
            return ConversationHandler.END
        return await handler_func(update, context, *args, **kwargs)
    return wrapper

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@require_subscription
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [
            InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data="enter_code"),
            InlineKeyboardButton("–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
            InlineKeyboardButton("üöÄ –ú–∏–Ω–∏-–∞–ø–∫–∏", web_app=WebAppInfo(url="https://sanyok8901.github.io/dravona/")),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@require_subscription
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ inline-–∫–Ω–æ–ø–æ–∫ ---
    inline_state = context.user_data.get("inline_state")
    if inline_state == "WAIT_CODE":
        user_code = text.strip()
        user_id = update.message.from_user.id
        if user_code not in codes:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        code_info = codes[user_code]
        if user_id in code_info["used_by"]:
            await update.message.reply_text("‚ùó–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–Ω–µ–µ.")
            context.user_data["inline_state"] = None
            return
        if code_info["max_uses"] != 0 and len(code_info["used_by"]) >= code_info["max_uses"]:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            context.user_data["inline_state"] = None
            return
        context.user_data["code"] = user_code
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
        context.user_data["inline_state"] = "WAIT_USERNAME"
        return
    elif inline_state == "WAIT_USERNAME":
        user = update.message.from_user
        user_id = user.id
        username_input = text.strip()
        user_code = context.user_data.get("code")
        if not user_code or user_code not in codes:
            await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            context.user_data["inline_state"] = None
            return
        code_info = codes[user_code]
        if user_id in code_info["used_by"]:
            await update.message.reply_text("‚ùó–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–Ω–µ–µ.")
            context.user_data["inline_state"] = None
            return
        if code_info["max_uses"] != 0 and len(code_info["used_by"]) >= code_info["max_uses"]:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            context.user_data["inline_state"] = None
            return
        code_info["used_by"].add(user_id)
        full_name = f"{user.first_name} {user.last_name or ''}".strip()
        real_username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"
        message = (
            f"üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥!\n\n"
            f"üë§ –ò–º—è: {full_name}\n"
            f"üÜî Telegram ID: {user.id}\n"
            f"üîó Username –∏–∑ —á–∞—Ç–∞: {username_input}\n"
            f"üîó Username –∏–∑ Telegram: {real_username}\n"
            f"üîê –ö–æ–¥: {user_code}\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: "
            f"{code_info['max_uses'] - len(code_info['used_by']) if code_info['max_uses'] != 0 else '‚àû'}"
        )
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=message)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–¥.")
        context.user_data["inline_state"] = None
        return
    elif inline_state == "WAIT_SUPPORT_USERNAME":
        user = update.message.from_user
        username_sent = text.strip()
        real_username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"
        msg = (
            f"üì© –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\n"
            f"üÜî Telegram ID: {user.id}\n"
            f"üîó Username –∏–∑ —á–∞—Ç–∞: {username_sent}\n"
            f"üîó Username –∏–∑ Telegram: {real_username}"
        )
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=msg)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
        context.user_data["inline_state"] = None
        return

    # --- –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
    if text == "–í–≤–µ—Å—Ç–∏ –∫–æ–¥":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:", reply_markup=ReplyKeyboardRemove()
        )
        return "WAIT_CODE"

    elif text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @yourname):",
            reply_markup=ReplyKeyboardRemove(),
        )
        return WAIT_SUPPORT_USERNAME
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# --- Callback –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ ---
async def inline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "check_subscribe":
        user_id = query.from_user.id
        if await check_subscription(user_id, context.bot):
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º start —á–µ—Ä–µ–∑ message, —á—Ç–æ–±—ã –º–µ–Ω—é –ø–æ—è–≤–∏–ª–æ—Å—å
            if query.message:
                fake_update = Update(
                    update.update_id,
                    message=query.message
                )
                await start(fake_update, context)
        else:
            await query.answer("‚ùó –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    elif query.data == "enter_code":
        await query.answer()
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:")
        context.user_data["inline_state"] = "WAIT_CODE"
    elif query.data == "support":
        await query.answer()
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @yourname):")
        context.user_data["inline_state"] = "WAIT_SUPPORT_USERNAME"
    else:
        await query.answer()

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            "WAIT_CODE": [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            "WAIT_USERNAME": [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            WAIT_SUPPORT_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(inline_callback))
    application.run_polling()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == "__main__":
    main()
